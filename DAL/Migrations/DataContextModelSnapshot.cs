// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Kernel.Entities.Adresse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Adresse1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("adresse1");

                    b.Property<string>("Adresse2")
                        .HasColumnType("longtext")
                        .HasColumnName("adresse2");

                    b.Property<string>("Adresse3")
                        .HasColumnType("longtext")
                        .HasColumnName("adresse3");

                    b.Property<string>("Batiment")
                        .HasColumnType("longtext")
                        .HasColumnName("batiment");

                    b.Property<int>("CodePostal")
                        .HasColumnType("int")
                        .HasColumnName("code_postal");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext")
                        .HasColumnName("complement");

                    b.Property<byte?>("Etage")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("etage");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libelle");

                    b.Property<byte?>("Porte")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("porte");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ville");

                    b.HasKey("Id");

                    b.ToTable("adresse");
                });

            modelBuilder.Entity("Kernel.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libelle");

                    b.Property<decimal>("PrixHT")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("prix_ht");

                    b.Property<decimal>("PrixTTC")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("prix_ttc");

                    b.Property<float>("TxTVA")
                        .HasColumnType("float")
                        .HasColumnName("tx_tva");

                    b.HasKey("Id");

                    b.ToTable("article");
                });

            modelBuilder.Entity("Kernel.Entities.Batiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libelle");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.HasIndex("SocieteId");

                    b.ToTable("batiment");
                });

            modelBuilder.Entity("Kernel.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("prenom");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocieteId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("Kernel.Entities.ClientAdresse", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("AdresseId")
                        .HasColumnType("int")
                        .HasColumnName("adresse_id");

                    b.HasKey("ClientId", "AdresseId");

                    b.HasIndex("AdresseId");

                    b.ToTable("client_adresse");
                });

            modelBuilder.Entity("Kernel.Entities.Devis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRedaction")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_redaction");

                    b.Property<decimal>("MtHT")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("mt_ht");

                    b.Property<decimal>("MtTTC")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("mt_ttc");

                    b.Property<decimal>("MtTVA")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("mt_tva");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SocieteId");

                    b.ToTable("devis");
                });

            modelBuilder.Entity("Kernel.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BatimentId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("prenom");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatimentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SocieteId");

                    b.ToTable("employee");
                });

            modelBuilder.Entity("Kernel.Entities.Facture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdresseFacturationId")
                        .HasColumnType("int");

                    b.Property<int?>("AdresseLivraisonId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_creation");

                    b.Property<DateTime>("DateFacturation")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_facturation");

                    b.Property<int?>("DevisId")
                        .HasColumnType("int");

                    b.Property<decimal>("MtHT")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("mt_ht");

                    b.Property<decimal>("MtTTC")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("mt_ttc");

                    b.Property<decimal>("MtTVA")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("mt_tva");

                    b.Property<decimal>("NetAPayer")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("net_a_payer");

                    b.Property<decimal>("Reglee")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("reglee");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresseFacturationId");

                    b.HasIndex("AdresseLivraisonId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DevisId");

                    b.HasIndex("SocieteId");

                    b.ToTable("facture");
                });

            modelBuilder.Entity("Kernel.Entities.HistoriqueClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SocieteId");

                    b.ToTable("historique_client");
                });

            modelBuilder.Entity("Kernel.Entities.LigneDevis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("DevisId")
                        .HasColumnType("int")
                        .HasColumnName("devis_id");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libelle");

                    b.Property<int>("NLigne")
                        .HasColumnType("int")
                        .HasColumnName("nligne");

                    b.Property<float>("Quantite")
                        .HasColumnType("float")
                        .HasColumnName("quantite");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("DevisId");

                    b.ToTable("ligne_devis");
                });

            modelBuilder.Entity("Kernel.Entities.LigneFacture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("FactureId")
                        .HasColumnType("int")
                        .HasColumnName("facture_id");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libelle");

                    b.Property<int>("NLigne")
                        .HasColumnType("int")
                        .HasColumnName("nligne");

                    b.Property<float>("Quantite")
                        .HasColumnType("float")
                        .HasColumnName("quantite");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(1)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("FactureId");

                    b.ToTable("ligne_facture");
                });

            modelBuilder.Entity("Kernel.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("libelle");

                    b.Property<int>("SocieteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocieteId");

                    b.ToTable("service");
                });

            modelBuilder.Entity("Kernel.Entities.Societe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdresseId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nom");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("siret");

                    b.HasKey("Id");

                    b.HasIndex("AdresseId");

                    b.ToTable("societe");
                });

            modelBuilder.Entity("Kernel.Entities.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nom");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("prenom");

                    b.HasKey("Id");

                    b.ToTable("utilisateur");
                });

            modelBuilder.Entity("Kernel.Entities.Batiment", b =>
                {
                    b.HasOne("Kernel.Entities.Adresse", "AdresseFK")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdresseFK");

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.Client", b =>
                {
                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.ClientAdresse", b =>
                {
                    b.HasOne("Kernel.Entities.Adresse", "AdressePK")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Client", "ClientPK")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdressePK");

                    b.Navigation("ClientPK");
                });

            modelBuilder.Entity("Kernel.Entities.Devis", b =>
                {
                    b.HasOne("Kernel.Entities.Client", "ClientFK")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientFK");

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.Employee", b =>
                {
                    b.HasOne("Kernel.Entities.Batiment", "BatimentFK")
                        .WithMany()
                        .HasForeignKey("BatimentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Service", "ServiceFK")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BatimentFK");

                    b.Navigation("ServiceFK");

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.Facture", b =>
                {
                    b.HasOne("Kernel.Entities.Adresse", "AdresseFacturationFK")
                        .WithMany()
                        .HasForeignKey("AdresseFacturationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Adresse", "AdresseLivraisonFK")
                        .WithMany()
                        .HasForeignKey("AdresseLivraisonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Kernel.Entities.Client", "ClientFK")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Devis", "DevisFK")
                        .WithMany()
                        .HasForeignKey("DevisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdresseFacturationFK");

                    b.Navigation("AdresseLivraisonFK");

                    b.Navigation("ClientFK");

                    b.Navigation("DevisFK");

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.HistoriqueClient", b =>
                {
                    b.HasOne("Kernel.Entities.Client", "ClientFK")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientFK");

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.LigneDevis", b =>
                {
                    b.HasOne("Kernel.Entities.Article", "ArticleFK")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Devis", null)
                        .WithMany("LignesDevis")
                        .HasForeignKey("DevisId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ArticleFK");
                });

            modelBuilder.Entity("Kernel.Entities.LigneFacture", b =>
                {
                    b.HasOne("Kernel.Entities.Article", "ArticleFK")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kernel.Entities.Facture", null)
                        .WithMany("LignesFacture")
                        .HasForeignKey("FactureId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("ArticleFK");
                });

            modelBuilder.Entity("Kernel.Entities.Service", b =>
                {
                    b.HasOne("Kernel.Entities.Societe", "SocieteFK")
                        .WithMany()
                        .HasForeignKey("SocieteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SocieteFK");
                });

            modelBuilder.Entity("Kernel.Entities.Societe", b =>
                {
                    b.HasOne("Kernel.Entities.Adresse", "AdresseFK")
                        .WithMany()
                        .HasForeignKey("AdresseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdresseFK");
                });

            modelBuilder.Entity("Kernel.Entities.Devis", b =>
                {
                    b.Navigation("LignesDevis");
                });

            modelBuilder.Entity("Kernel.Entities.Facture", b =>
                {
                    b.Navigation("LignesFacture");
                });
#pragma warning restore 612, 618
        }
    }
}
